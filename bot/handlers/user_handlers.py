import asyncio
from datetime import datetime
from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery,BotCommand, photo_size, ContentTypes, ContentType, ReplyKeyboardRemove, InputMediaPhoto, MediaGroup
from aiogram.dispatcher.filters import CommandStart, Text, MediaGroupFilter
# from aiogram.dispatcher.filters import F
from typing import List
import json 
from aiogram_media_group import media_group_handler
import re
import pickle
import jsonpickle
from geopy.geocoders import Nominatim

from bot.keyboards.user_keyboards import choose_language, get_tel_number, user_main_menu_markup, select_article_type_markup, create_article_default_markup, accept_create_article, choose_new_language, geoposition_markup
from bot.keyboards.admin_keyboard import admin_main_menu_markup, get_lang_markup
from bot.states.states import CreateArticleStates, ModerationStates, RegistrationStates
from bot.database.database import Article, DBCommands, User, DuplicateArticleException
from bot.loader import dp, bot, _
from bot.config import ADMIN_ID
from bot.utils.misc import rate_limit
from bot.utils.utils import get_sample_from_article, send_article_to_chanel, check_article_for_errors, redis_client, set_last_moderation_time
import logging


logger = logging.getLogger('user_handler')
logger.setLevel(logging.DEBUG)
handler = logging.FileHandler(filename="bot/logs/user_handler.log")
formatter = logging.Formatter('[%(asctime)s] - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)


db = DBCommands()

async def register_commands():
    await bot.set_my_commands([
        BotCommand('restart', '–†–µ—Å—Ç–∞—Ä—Ç')
    ])
    
@rate_limit(5)
@dp.message_handler(commands="start")
@dp.message_handler(commands="restart")
async def __start(msg: Message, state: FSMContext) -> None:
    await state.reset_data()
    await state.reset_state()
    user_id = msg.from_user.id
    user_name = msg.from_user.full_name
    await bot.send_sticker(msg.from_user.id, sticker="CAACAgIAAxkBAAIJQWSO2SepS6soZ_x0oaMce-r6Vd4QAAJxDgACHIJQS-TTUGYws97lLwQ")
    await msg.bot.send_message(user_id, f'–ü—Ä–∏–≤–µ—Ç, {user_name}!', reply_markup=ReplyKeyboardRemove())
    await db.add_new_user()
    await msg.bot.send_message(user_id, "–í—ã–±–µ—Ä–∏ —è–∑—ã–∫", reply_markup=choose_language)

@dp.callback_query_handler(text_contains="lang")
async def __set_language(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]
    user: User  = await db.set_language(lang)
    data = await state.get_data()
    is_edit = data.get('change_language')
    await call.message.answer(_("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", locale=lang), reply_markup= get_lang_markup(lang, call))
    if is_edit:
        await bot.send_message(call.from_user.id, _("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ", locale=lang), reply_markup= get_lang_markup(lang, call))
    await state.reset_data()
    if not is_edit:
        if user.mobile:
        # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang
            
            await bot.send_message(call.from_user.id, _("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", locale=lang), reply_markup=get_lang_markup(lang, call))
        else:
            await bot.send_message(call.from_user.id, _('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', locale=lang), reply_markup=get_tel_number(lang))
            await RegistrationStates.NUMBER.set()
    await call.answer()

@dp.message_handler(content_types=ContentTypes.CONTACT | ContentTypes.TEXT, state=RegistrationStates.NUMBER)
async def __set_number(msg: Message, state: FSMContext):
    if 'contact' in msg:
        phone_number = msg['contact']['phone_number']
    else:
        phone_number = msg.text
        validate_phone_number_pattern = "^\\+?[0-9][0-9]{7,14}$"
        number  = re.match(validate_phone_number_pattern, msg.text)
        if not number: 
            await bot.send_message(msg.from_user.id, _('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑'))
            return
        
    data = await state.get_data()
    is_edit = data.get('change_number')

    await db.set_mobile(phone_number)
    if is_edit:
        await bot.send_message(msg.from_user.id, _("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω"), reply_markup=admin_main_menu_markup if str(msg.from_user.id) in ADMIN_ID else user_main_menu_markup)
    else:
        await bot.send_message(msg.from_user.id, _("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é! ü´°"), reply_markup=admin_main_menu_markup if str(msg.from_user.id) in ADMIN_ID else user_main_menu_markup)
    await state.reset_state()

# @dp.message_handler(state=CreateArticleStates.FINISHED)
@dp.message_handler(Text(equals=[_("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]), state="*")
async def main_menu(msg: Message, state: FSMContext):
    cur_state = await state.get_state()
    # print(type(cur_state))
    # print(cur_state)
    if cur_state == "ModerationStates:MODERATE":
        # print('qqqq')
        set_last_moderation_time()
    await bot.send_message(msg.from_user.id, _("–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!"), reply_markup=admin_main_menu_markup if str(msg.from_user.id) in ADMIN_ID else user_main_menu_markup)
    await state.reset_state()
    await state.reset_data()

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.TITLE)
@dp.message_handler(Text(equals=[_("–°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ üÜï")]))
async def __create_article(msg: Message, state: FSMContext):
    await bot.send_message(msg.from_user.id, _("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥—Ä–∏—é"), reply_markup=select_article_type_markup)
    await CreateArticleStates.CATEGORY.set()

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.DESCRIPTION)
@dp.message_handler(state=CreateArticleStates.CATEGORY)
async def __select_category(msg: Message, state: FSMContext):
    if msg.text != str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")) and msg.text in [str(_("‚ùì –ò—â—É")), str(_("‚ùï –û—Ç–¥–∞–º")), str(_("‚ùóÔ∏è –ü—Ä–æ–¥–∞–º"))]:
        article = Article()
        article.type = msg.text
    elif  msg.text == str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")):
        data = await state.get_data()
        article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    else:
        return

    article.user_id = msg.from_user.id
    await bot.send_message(msg.from_user.id, _("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"), reply_markup=create_article_default_markup)
    await CreateArticleStates.TITLE.set()
    # print(article)
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.PRICE)
@dp.message_handler(state=CreateArticleStates.TITLE)
async def __select_title(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    article.title = msg.text.replace(str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), "").replace(str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")), "")
    await bot.send_message(msg.from_user.id, _("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"), reply_markup=create_article_default_markup)
    await CreateArticleStates.DESCRIPTION.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.PHOTO)
@dp.message_handler(state=CreateArticleStates.DESCRIPTION)
async def __select_description(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    article.description = msg.text.replace(str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), "").replace(str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")), "")
    if article.type == str(_("‚ùóÔ∏è –ü—Ä–æ–¥–∞–º")):
        await bot.send_message(msg.from_user.id, _("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞"), reply_markup=create_article_default_markup)
        await CreateArticleStates.PRICE.set()
    else:
        await bot.send_message(msg.from_user.id, _("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"), reply_markup=create_article_default_markup)
        article.price = ""
        await CreateArticleStates.PHOTO.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.LOCATION)
@dp.message_handler(state=CreateArticleStates.PRICE)
async def __select_price(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    article.price = msg.text.replace(str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), "").replace(str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")), "")
    await bot.send_message(msg.from_user.id, _("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ"), reply_markup=create_article_default_markup)
    await CreateArticleStates.PHOTO.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.NICKNAME)
@dp.message_handler(content_types=ContentType.PHOTO, state=CreateArticleStates.PHOTO)
@dp.message_handler(Text(equals=[_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")]), state=CreateArticleStates.PHOTO)
@dp.message_handler(is_media_group=True, content_types=[ContentType.PHOTO, ContentTypes.TEXT], state=CreateArticleStates.PHOTO)
async def __select_photo(msg: Message, state: FSMContext, album: List[Message] = None):
    images_list = []
    # print(msg)
    if album:
        for obj in album:
            if obj.photo:
                file_id = obj.photo[-1].file_id
            else:
                file_id = obj[obj.content_type].file_id
            user_id = obj.from_user.id
            try:
                # We can also add a caption to each file by specifying `"caption": "text"`
                images_list.append(file_id)
            except ValueError:
                return await msg.answer("This type of album is not supported by aiogram.")
        user_id = album[0].from_user.id
    elif msg.photo:
        user_id = msg.from_user.id
        file_id = msg.photo[-1].file_id
        images_list.append(file_id)
    else:
        user_id = msg.from_user.id
        pass
    images = {'images': images_list}
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    article.photo = json.dumps(images)
    await bot.send_message(user_id, _("–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –∏ –∏–Ω–¥–µ–∫—Å"), reply_markup=create_article_default_markup)
    await CreateArticleStates.LOCATION.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.MOBILE)
@dp.message_handler(state=CreateArticleStates.LOCATION)
async def __select_location(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    article.location = msg.text.replace(str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), "").replace(str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")), "")
    # print(msg)
    username = msg.from_user.username
    if username is not None:
        text = _("–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ –± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è: @{}, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤—Ä—É—á–Ω—É—é").format(username)
    else:
        text = _("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Ç–µ–ª–µ–≥—Ä–∞–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @).\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ –± –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ")
    await bot.send_message(msg.from_user.id, text, reply_markup=create_article_default_markup)
    await CreateArticleStates.NICKNAME.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(Text(equals=[_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]), state=CreateArticleStates.MOBILE)
@dp.message_handler(state=CreateArticleStates.NICKNAME)
async def __select_nickname(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    if msg.text not in[str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))] and msg.text.startswith('@'):
        article.username = msg.text
    else:
        article.username = f"@{msg.from_user.username}"
    user: User = await db.get_user(msg.from_user.id)
    article.mobile_number = user.mobile
    if user.mobile is not None:
        text = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ –± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä: {}").format(user.mobile)
    else:
        text = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +).\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ –± –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –µ–≥–æ")
    # text = _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', —á—Ç–æ –± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –Ω–æ–º–µ—Ä: {}".format(user.mobile))
    await bot.send_message(msg.from_user.id, text, reply_markup=create_article_default_markup)
    await CreateArticleStates.MOBILE.set()
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))

@dp.message_handler(state=CreateArticleStates.MOBILE)
async def __select_phone(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    if msg.text not in[str(_("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è")), str(_("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"))] and msg.text.startswith('+'):
        article.mobile_number = msg.text
    await state.update_data(article=json.dumps(jsonpickle.encode(article, unpicklable=False)))
    await bot.send_message(msg.from_user.id, _("–ì–æ—Ç–æ–≤–æ! –í—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:"), reply_markup=ReplyKeyboardRemove())
    text = get_sample_from_article(article)
    # article_photos = article.photo
    photos = json.loads(article.photo)['images']
    if len(photos) > 0:
        try:
            await bot.send_media_group(msg.from_user.id, media=[InputMediaPhoto(m, caption=text if key == 0 else "",  parse_mode="HTML") for key, m in enumerate(photos)])
        except Exception as ex:
            await bot.send_message(msg.from_user.id, ex, reply_markup=admin_main_menu_markup if str(msg.from_user.id) in ADMIN_ID else user_main_menu_markup)
            await state.reset_data()
            await state.reset_state()
            return
    else:
        await bot.send_message(msg.from_user.id, text)
    await bot.send_message(msg.from_user.id, _("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å? (–î–∞/–ù–µ—Ç)"), reply_markup=accept_create_article)
    await CreateArticleStates.CHECK.set()

@dp.message_handler(state=CreateArticleStates.CHECK)
async def __accept_article(msg: Message, state: FSMContext):
    data = await state.get_data()
    article: Article = Article(**json.loads(jsonpickle.decode(data['article']))['__values__'])
    if msg.text == str(_("–î–∞")):
        article.created_at = datetime.now()
        # is_duplicate = await db.check_article_duplicate(article)
        if str(msg.from_user.id) in ADMIN_ID:
            article.is_approved=True
            article.is_reviewed=True
            article.reviewed_at = datetime.now()
            article = await article.create()   
            await send_article_to_chanel(article)
            message = _("–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
            markup = admin_main_menu_markup
            await bot.send_message(msg.from_user.id, message, reply_markup=markup)
        elif str(msg.from_user.id) not in ADMIN_ID:
            error_text = await check_article_for_errors(article)
            if error_text:
                message = error_text
                markup = user_main_menu_markup
                await bot.send_message(msg.from_user.id, message, reply_markup=markup)
            else:
                redis = redis_client.get('work_mode')
                if redis:
                    redis = redis.decode("utf-8")
                
                if redis and redis == 'auto':
                    article.is_approved = True
                    article.is_reviewed = True
                    article.reviewed_at = datetime.now()
                    article = await article.create()   
                    mess = await send_article_to_chanel(article)
                    message = _("–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                    markup = user_main_menu_markup
                    user_id = article.user_id
                    if isinstance(mess, list):
                        sender_chat_id = mess[0].sender_chat.id
                        mess_id = mess[0].message_id
                    else:
                        sender_chat_id = mess.sender_chat.id
                        mess_id = mess.message_id
                    await bot.send_message(msg.from_user.id, message, reply_markup=markup)
                    await bot.forward_message(user_id, sender_chat_id, mess_id)
                else:
                    article = await article.create()  
                    message = _("–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                    markup = user_main_menu_markup
                    await bot.send_message(msg.from_user.id, message, reply_markup=markup)
        
    elif msg.text == _("–ù–µ—Ç"):
        await bot.send_message(msg.from_user.id, _("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ"), reply_markup=admin_main_menu_markup if str(msg.from_user.id) in ADMIN_ID else user_main_menu_markup)
    await state.reset_state()
    await state.reset_data()

@rate_limit(5)
@dp.message_handler(Text(equals=[_("–ú–æ–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")]))
async def __my_articles(msg: Message):
    articles: List[Article] | None = await db.get_user_articles(msg.from_user.id)
    articles.sort(key=lambda x: x.id)
    if len(articles) > 0:
        for key, article in enumerate(articles):
            await send_article_to_chanel(article, msg.from_user.id)
    else:
        await bot.send_message(_('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π ü•∫'))

@dp.message_handler(Text(equals=[_("–Ø–∑—ã–∫")]))
async def __change_language(msg: Message, state: FSMContext):
    await bot.send_message(msg.from_user.id, "‚ôªÔ∏è", reply_markup=ReplyKeyboardRemove())
    await bot.send_message(msg.from_user.id, _("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫"), reply_markup=choose_new_language)
    await state.set_data({"change_language":True})

@dp.message_handler(Text(equals=[_("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")]))
async def __change_language(msg: Message, state: FSMContext):
    await bot.send_message(msg.from_user.id, _("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä"), reply_markup=get_tel_number())
    await state.set_data({"change_number":True})
    await RegistrationStates.NUMBER.set()



    # await bot.send_sticker(msg.from_user.id, sticker="CAACAgIAAxkBAAIJQWSO2SepS6soZ_x0oaMce-r6Vd4QAAJxDgACHIJQS-TTUGYws97lLwQ")
    

